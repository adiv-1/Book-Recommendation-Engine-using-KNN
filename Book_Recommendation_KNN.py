# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn - Aditya Venkat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zWWBT4YH6ECdpwRQMkzDKxh1bLb3TEyo
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

print (df_books.head())
print (df_ratings.head())

# So data was too big for me to pivot the data, so needed to filter users and books with 200/100 ratings respectively
user_counts = df_ratings['user'].value_counts()
adj_user_count = user_counts[user_counts >= 200].index

book_counts = df_ratings['isbn'].value_counts()
adj_book_count = book_counts[book_counts >= 100].index

# Applying filters
adj_ratings = df_ratings[(df_ratings['user'].isin(adj_user_count)) & (df_ratings['isbn'].isin(adj_book_count))].reset_index(drop=True)

# Printing the number of excluded entries
print(df_ratings.shape[0] - adj_ratings.shape[0], 'of', df_ratings.shape[0], 'entries excluded')

# merge tables on isbn
book_ratings = pd.merge(adj_ratings, df_books, on='isbn')
book_ratings.head()

book_ratings['rating'] = pd.to_numeric(book_ratings['rating'], errors = 'coerce') #ensure that rating column is in numeric form
book_ratings.dropna(subset = ['rating'], inplace = True) # Drop rows with NaN values
book_ratings = book_ratings.sort_values(by = ['title', 'isbn', 'rating'], ascending = [True, True, False]) # Sort by title, then isbn, then rating
book_ratings = book_ratings.drop_duplicates(subset=['user', 'title'], keep = 'first') # Drop duplicates keeping the first occurrence
book_ratings.reset_index(drop=True, inplace=True) # Reset index after dropping duplicates
book_ratings.head()

Ratings = book_ratings.pivot(index='title', columns='user', values='rating').fillna(0)
Ratings.head()

# convert to matrix
model = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
model.fit(Ratings.values)

# function to return recommended books - this will be tested
trial_title = 'The Queen of the Damned (Vampire Chronicles (Paperback))'

def get_recommends(title = ""):

  if title not in Ratings.index:
        print(f'Book "{title}" does NOT exist in the database.')
        return

  book_features = Ratings.loc[title].values.reshape(1, -1)

  distances, recommendations = model.kneighbors(book_features, n_neighbors=6)

  recommended_books = pd.DataFrame({
      'Book Title'   : Ratings.iloc[recommendations[0]].index,
      'Relative Distance': distances[0]
    })

  recommended_books = recommended_books.sort_values(by='Relative Distance', ascending=False).head().values

  return [title, recommended_books]

get_recommends(trial_title)

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()